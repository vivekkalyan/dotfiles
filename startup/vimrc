" General
set nocompatible        " remove vi compatibility
set encoding=utf-8      " set vim encoding
set scrolloff=3         " minimum lines to keep in view around cursor
set backspace=indent,eol,start  " backspace works in normal mode
set laststatus=2        " show file name in status bar
set statusline=[%n]\ %<%f\ %m%r%#Pmenu#%=%-14.(%*%l,%c%V%)\ %{LineNoIndicator()}

set path+=**            " search down into subfolders for files
set wildignore+=**/node_modules/**  " ignore folders
set wildignore+=**/env/**           " ignore folders
set wildignore+=**/data/**           " ignore folders
set wildmenu            " command-line completion
set wildmode=longest:list,full  " cycle between command line completions
set clipboard=unnamed   " use system clipboard by default
set nrformats+=bin      " allow C-A, C-X for binary

set ttimeoutlen=100     " set keycode timeout (defualt is too long -
                        " follows timeoutlen for mappings which is 1000ms)
                        " used for fedora machine with xmodmap and xcape

let mapleader = ','     " map leader key to ,

" Colors
syntax enable           " enable syntax processing
filetype plugin indent on      " run scripts based on type of file

" Formating
set tabstop=4           " number of visual spaces per TAB
set softtabstop=4       " number of spaces in tab when editing
set expandtab           " tabs are spaces
set shiftwidth=4        " number of spaces in (auto)indent
set autoindent          " follow indentation of previous line
set shiftround          " always indent by multiple of shiftwidth
set nojoinspaces        " don't autoinsert two spaces after '.', '?', '!' for join command
set formatoptions+=j    " remove comment leader when joining comment lines
set formatoptions+=n    " smart auto-indenting inside numbered lists

" Folding
set foldenable          " enable folding
set foldlevelstart=1    " folds by default
set foldmethod=indent   " fold based on indent level

" UI Config
set relativenumber      " show relative line numbers
set number              " ... except for current line
set showcmd             " show command in bottom bar
set showmode            " show mode in bottom bar
set cursorline          " highlight current line
set lazyredraw          " redraw only when we need to.
set showmatch           " highlight matching [{()}]
set wrap                " wrap text
set breakindent         " indent wrapped lines to match start
set textwidth=120        " characters to wrap text at
set list                " show whitespace
set listchars=tab:▷┅    " WHITE RIGHT-POINTING TRIANGLE (U+25B7, UTF-8: E2 96 B7)
                        " + BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL (U+2505,
                        " UTF-8: E2 94 85)
set listchars+=trail:•  " BULLET (U+2022, UTF-8: E2 80 A2)

" Windows
set splitbelow          " open horizontal split below current window
set splitright          " open vertical split to the right of current window
set switchbuf=usetab    " try to reuse windows/tabs when switching buffers
set hidden              " allow switching modified buffers
set fillchars=vert:┃    " solid line to seperate windows

" Searching
set ignorecase          " Ignore case when typing
set smartcase           " ... unless we type a capital
set incsearch           " Incremental searching
set hlsearch            " Highlight matches when searching

" Cursor indicates mode
let &t_SI = "\<esc>[5 q"    " I beam cursor for insert mode
let &t_EI = "\<esc>[2 q"    " block cursor for normal mode
let &t_SR = "\<esc>[3 q"    " underline cursor for replace mode

" Window management
map <C-w>h :call WinMove('h')<cr>
map <C-w>k :call WinMove('k')<cr>
map <C-w>l :call WinMove('l')<cr>
map <C-w>j :call WinMove('j')<cr>

nmap <C-w><left>  :call ResizeWindow('left')<cr>
nmap <C-w><right> :call ResizeWindow('right')<cr>
nmap <C-w><up>    :call ResizeWindow('up')<cr>
nmap <C-w><down>  :call ResizeWindow('down')<cr>

"C-jk to move down/up paragraph
noremap <silent> <expr> <C-k> (line('.') - search('^\n.\+$', 'Wenb')) . 'kzv^'
noremap <silent> <expr> <C-j> (search('^\n.', 'Wen') - line('.')) . 'jzv^'

" Make ctags
command! MakeTags !ctags -R .

" Y to yank to end of line
nnoremap Y y$

" copy to attached terminal using the yank(1) script:
" https://github.com/sunaku/home/blob/master/bin/yank
function! Yank(text) abort
  let escape = system('yank', a:text)
  if v:shell_error
    echoerr escape
  else
    call writefile([escape], '/dev/tty', 'b')
  endif
endfunction
" noremap <silent> <C-ins> y:<C-U>call Yank(@0)<CR>

function! CopyYank() abort
  call Yank(join(v:event.regcontents, "\n"))
endfunction
autocmd TextYankPost * call CopyYank()

" split lines (opposite of shift-J)
nnoremap <S-s> :keeppatterns substitute/\s*\%#\s*/\r/e <bar> normal! ==<CR>

" Q to play macro
nnoremap Q @q

" Enter to enter command mode (& disable for command window to allow q:, q/)
nnoremap <cr> :
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
autocmd CmdwinEnter * nnoremap <buffer> <CR> <CR>

" Turn off vim's custom regex
nnoremap / /\v
vnoremap / /\v

" Minimal git blame
command! -range GB echo join(systemlist("git blame -L <line1>,<line2> " .expand('%')), "\n")

" Move by visual line rather than physical line
nnoremap j gj
nnoremap k gk
" Move correctly when text is wrapped and using {count}j/k
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" Command Mode
" Terminal-like experience for command line
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" H/L to move to start/end of sentences
noremap H ^
noremap L $
vnoremap L g_

" `<Tab>`/`<S-Tab>` to move between matches without leaving incremental search.
" Note dependency on `'wildcharm'` being set to `<C-z>` in order for this to
" work.
set wildcharm=<C-z>

cnoremap <expr> <Tab> getcmdtype() == '/' \|\| getcmdtype() == '?' ? '<CR>/<C-r>/' : '<C-z>'
cnoremap <expr> <S-Tab> getcmdtype() == '/' \|\| getcmdtype() == '?' ? '<CR>?<C-r>/' : '<S-Tab>'

inoremap ;pdb import pdb; pdb.set_trace()<ESC>
inoremap ;name if __name__ == "__main__":<ESC>

" Save temporary/backup files not in the local directory, but in your ~/.vim
" directory, to keep them out of git repos.
" But first mkdir backup, swap, view and undo first to make this work
call system('mkdir ~/.vim')
call system('mkdir ~/.vim/backup')
call system('mkdir ~/.vim/swap')
call system('mkdir ~/.vim/view')
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set viewdir=~/.vim/view//
set viewoptions=cursor,folds

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    call system('mkdir ~/.vim/undo')
    set undodir=~/.vim/undo//
    set undofile
    set undolevels=1000
    set undoreload=10000
endif

" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
" autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
        \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Vim Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-fugitive'
Plug 'bronson/vim-visual-star-search'
Plug 'wincent/loupe'
Plug 'wincent/scalpel'
Plug 'wincent/pinnacle'
" Javascript
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
" Python
Plug 'vim-scripts/indentpython.vim'
Plug 'vim-python/python-syntax'
Plug 'tmhedberg/SimpylFold'
Plug 'jeetsukumaran/vim-filebeagle'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'moll/vim-bbye'
Plug 'junegunn/vim-peekaboo'
Plug 'tmsvg/pear-tree'
Plug 'unblevable/quick-scope'
Plug 'airblade/vim-rooter'
Plug 'drzel/vim-line-no-indicator'
Plug 'romainl/vim-cool'
Plug 'vim-scripts/Tab-Name'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'plasticboy/vim-markdown'

Plug 'reedes/vim-pencil'
Plug 'dhruvasagar/vim-table-mode'
call plug#end()

"SimpylFold
let g:SimpylFold_fold_import = 0

"Python syntax
let python_highlight_all = 1

" Bbye
nmap <Leader>q :Bdelete<CR>
nmap <Leader>Q :bufdo :Bdelete<CR>

" Scalpel
nmap c* <Plug>(Scalpel)
vnoremap c* "hy:%s/<C-r>h//gc<left><left><left>

" Pear-Tree
let g:pear_tree_smart_openers = 1
let g:pear_tree_smart_closers = 1
let g:pear_tree_smart_backspace = 1

" GitGutter
set updatetime=100  " refresh rate
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'
" make mappings more mnemonic (git)
nmap ]g <Plug>(GitGutterNextHunk)
nmap [g <Plug>(GitGutterPrevHunk)
nmap gs <Plug>(GitGutterStageHunk)
nmap gu <Plug>(GitGutterUndoHunk)
nmap gp <Plug>(GitGutterPreviewHunk)

" File Beagle
let g:filebeagle_suppress_keymaps = 1
map <silent> -          <Plug>FileBeagleOpenCurrentBufferDir

autocmd! bufwritepost .vimrc source %

" FZF
let g:fzf_layout = { 'down': '~40%' }
let g:fzf_command_prefix = 'Fzf'
nmap <leader><tab> <plug>(fzf-maps-n)
nmap <leader>f :FzfFiles<CR>
nmap <leader>a :FzfRg<CR>
nmap gb :FzfBuffers<CR>
nmap <leader>g :FzfCommits<CR>
nmap <leader>G :FzfBCommits<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }


imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)

inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" Fugitive
nmap gC :Gcommit<CR>
nmap gB :Gblame<CR>
nmap gS :Gstatus<CR>

" TabName
command! -nargs=1 TabName TName <args>
command! TabNoName TNoName

" Markdown Preview
let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 0


" conceal links, bold, italics
let g:vim_markdown_conceal = 2
" don't conceal latex (since support is not good)
let g:vim_markdown_math = 0
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_strikethrough = 1
" automatically save files when following links
let g:vim_markdown_autowrite = 1
" open new file in vsplit
let g:vim_markdown_edit_url_in = 'vsplit'
" follow anchor to headings
let g:vim_markdown_follow_anchor = 1

augroup pencil
  autocmd!
  autocmd FileType markdown     call pencil#init({'wrap': 'hard'})
augroup END

let g:pencil#autoformat_config = {
    \   'markdown': {
    \     'black': [
    \       'htmlH[0-9]',
    \       'markdown(Code|H[0-9]|Url|IdDeclaration|Link|Rule|Highlight[A-Za-z0-9]+)',
    \       'markdown(ListMarker|OrderedListMarker)',
    \       'markdown(FencedCodeBlock|InlineCode)',
    \       'mkd(Code|Rule|Delimiter|Link|ListItem|ListItemLine|IndentCode|Snippet[A-Za-z0-9]+)',
    \       'mmdTable[A-Za-z0-9]*',
    \       'Comment',
    \       'Table',
    \     ],
    \     'white': [
    \      'markdown(Code|Link)',
    \     ],
    \     'enforce-previous-line': 1,
    \   },
    \ }

function! CreateZet(...)
  let l:fname = ''.localtime().'.md'
  let l:fnamepath = expand('~/wiki/') . l:fname

  " edit the new file
  execute "e " . l:fnamepath

  " enter the title and timestamp in the new file, toggle wrap functionality
  " from pencil to simplify things
  PencilToggle
  if len(a:000) > 0
    execute "normal ggO---\<CR>title: ".join(a:000)."\<CR>created: \<c-r>=strftime('%Y-%m-%d %H:%M')\<CR>\<CR>---\<CR>\<CR># ".join(a:000)."\<esc>G"
  else
    execute "normal ggO---\<CR>title: \<CR>created: \<c-r>=strftime('%Y-%m-%d %H:%M')\<CR>\<CR>---\<CR>\<esc>G"
  endif
  PencilToggle
  write
  setlocal nobuflisted
  execute "normal \<c-^>"
  return l:fname
endfunction

" Returns syntax names at cursor
nmap <F9> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

function! s:roam_file(input)
    " query, keystroke, line or query, keystroke
    if len(a:input) == 0
        return
    endif
    let l:keystroke = a:input[1]
    if l:keystroke ==? 'ctrl-l'
        " enter markdown link
        if len(a:input) == 3
            let l:line = split(a:input[2])
            execute "normal! a[" .join(l:line[1:]) ."](./".l:line[0].")"
        endif
    else
        if len(a:input) == 2
            let l:fname = CreateZet(a:input[0])
        elseif len(a:input) == 3
            let l:fname = split(a:input[2])[0]
            if empty(glob("~/wiki/".l:fname))
                let l:fname = CreateZet(a:input[0])
            endif
        endif
        execute 'e ~/wiki/'.l:fname
        setlocal nobuflisted
    endif
endfunction

function! s:roam_link(input)
    " input: [query] or [query, line]
    if len(a:input) == 0
        return
    endif
    if len(a:input) == 1
        let l:title = a:input[0]
        let l:link = CreateZet(l:title)
    elseif len(a:input) == 2
        let l:line = split(a:input[1])
        let l:title = join(l:line[1:])
        let l:link = l:line[0]
        if empty(glob("~/wiki/".l:link))
            let l:title = a:input[0]
            let l:link = CreateZet(l:title)
        endif
    endif
    execute "normal! a[".l:title."](./".l:link.")"
endfunction

" check this name for collision/better namespace
let fzf_command = 'head -n 2 /home/vivek/wiki/*.md | paste -d " " - - - - | cut -d" " -f2,6- | grep -oP "[\d]+.md.*"'

command! -bang -nargs=* RoamFile call fzf#run(fzf#wrap({
            \   'source': fzf_command,
            \   'down': 20,
            \   'sink*': function('<sid>roam_file'),
            \   'options': '--print-query --no-sort --expect ctrl-l --bind "change:reload(head -n 2 /home/vivek/wiki/*.md | paste -d \" \" - - - - | cut -d\" \" -f2,6- | grep -oP \"[\d]+.md.*\"; echo {q})"'
            \ }))

command! -bang -nargs=* RoamLink call fzf#run(fzf#wrap({
            \   'source': fzf_command,
            \   'down': 20,
            \   'sink*': function('<sid>roam_link'),
            \   'options': '--print-query --no-sort --bind "change:reload(head -n 2 /home/vivek/wiki/*.md | paste -d \" \" - - - - | cut -d\" \" -f2,6- | grep -oP \"[\d]+.md.*\"; echo {q})"'
            \ }))

inoremap <C-L> <ESC>:RoamLink<CR>
noremap <leader>nl :RoamLink<CR>
noremap <leader>nf :RoamFile<CR>


for char in [ '_', '.', ':', ',', ';', '<bar>', '/', '<bslash>', '*', '+', '-', '#' ]
    execute 'xnoremap i' . char . ' :<C-u>normal! T' . char . 'vt' . char . '<CR>'
    execute 'onoremap i' . char . ' :normal vi' . char . '<CR>'
    execute 'xnoremap a' . char . ' :<C-u>normal! F' . char . 'vf' . char . '<CR>'
    execute 'onoremap a' . char . ' :normal va' . char . '<CR>'
endfor

" number text object (integer and float)
" --------------------------------------
" in
function! VisualNumber()
    call search('\d\([^0-9\.]\|$\)', 'cW')
    normal v
    call search('\(^\|[^0-9\.]\d\)', 'becW')
endfunction
xnoremap in :<C-u>call VisualNumber()<CR>
onoremap in :<C-u>normal vin<CR>

" square brackets text objects
" ----------------------------
" ir ar
xnoremap ir i[
xnoremap ar a[
onoremap ir :normal vi[<CR>
onoremap ar :normal va[<CR>

" line text objects
" -----------------
" il al
xnoremap il g_o^
onoremap il :<C-u>normal vil<CR>
xnoremap al $o0
onoremap al :<C-u>normal val<CR>

" square brackets text objects
" ----------------------------
" iq aq
xnoremap iq i'
xnoremap aq a'
onoremap iq :normal vi'<CR>
onoremap aq :normal va'<CR>

" square brackets text objects
" ----------------------------
" iQ aQ
xnoremap iQ i"
xnoremap aQ a"
onoremap iQ :normal vi"<CR>
onoremap aQ :normal va"<CR>
